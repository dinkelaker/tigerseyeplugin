machine WordMatcher {
	start state _{
		entry: output "_";
		transitions {
			when END end;
			when f enter _f;
			when g enter _g;
			when e enter _e;
			when b enter _b;
			when c enter _c;
			when a enter _a;
			when n enter _n;
			when o enter _o;
			when j enter _j;
			when i enter _i;
			when w enter _w;
			when v enter _v;
			when u enter _u;
			when t enter _t;
			when s enter _s;
			when r enter _r;
			when p enter _p;
		}
	}

	state _f {
		entry: output "_f";
		transitions {
			when o enter _fo;
		}
	}

	state _fo {
		entry: output "_fo";
		transitions {
			when r enter _for;
		}
	}

	state _for {
		entry: output "_for";
		transitions {
			when _ enter _;
		}
	}

	state _g {
		entry: output "_g";
		transitions {
			when u enter _gu;
		}
	}

	state _gu {
		entry: output "_gu";
		transitions {
			when t enter _gut;
		}
	}

	state _gut {
		entry: output "_gut";
		transitions {
			when e enter _gute;
		}
	}

	state _gute {
		entry: output "_gute";
		transitions {
			when n enter _guten;
		}
	}

	state _guten {
		entry: output "_guten";
		transitions {
			when b enter _gutenb;
		}
	}

	state _gutenb {
		entry: output "_gutenb";
		transitions {
			when e enter _gutenbe;
		}
	}

	state _gutenbe {
		entry: output "_gutenbe";
		transitions {
			when r enter _gutenber;
		}
	}

	state _gutenber {
		entry: output "_gutenber";
		transitions {
			when g enter _gutenberg;
		}
	}

	state _gutenberg {
		entry: output "_gutenberg";
		transitions {
			when _ enter _;
		}
	}

	state _e {
		entry: output "_e";
		transitions {
			when b enter _eb;
		}
	}

	state _eb {
		entry: output "_eb";
		transitions {
			when o enter _ebo;
		}
	}

	state _ebo {
		entry: output "_ebo";
		transitions {
			when o enter _eboo;
		}
	}

	state _eboo {
		entry: output "_eboo";
		transitions {
			when k enter _ebook;
		}
	}

	state _ebook {
		entry: output "_ebook";
		transitions {
			when _ enter _;
		}
	}

	state _b {
		entry: output "_b";
		transitions {
			when y enter _by;
		}
	}

	state _by {
		entry: output "_by";
		transitions {
			when _ enter _;
		}
	}

	state _c {
		entry: output "_c";
		transitions {
			when o enter _co;
		}
	}

	state _co {
		entry: output "_co";
		transitions {
			when s enter _cos;
		}
	}
}