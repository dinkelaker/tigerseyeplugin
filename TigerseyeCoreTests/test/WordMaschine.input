machine WordMatcher {
	start state _{
		entry: output "_";
		transitions {
			when END end;
			when f enter _f;
			when g enter _g;
			when e enter _e;
			when b enter _b;
			when c enter _c;
			when a enter _a;
			when n enter _n;
			when o enter _o;
			when j enter _j;
			when i enter _i;
			when w enter _w;
			when v enter _v;
			when u enter _u;
			when t enter _t;
			when s enter _s;
			when r enter _r;
			when p enter _p;
		}
	}

	state _f {
		entry: output "_f";
		transitions {
			when o enter _fo;
		}
	}

	state _fo {
		entry: output "_fo";
		transitions {
			when r enter _for;
		}
	}

	state _for {
		entry: output "_for";
		transitions {
			when _ enter _;
		}
	}

	state _g {
		entry: output "_g";
		transitions {
			when u enter _gu;
		}
	}

	state _gu {
		entry: output "_gu";
		transitions {
			when t enter _gut;
		}
	}

	state _gut {
		entry: output "_gut";
		transitions {
			when e enter _gute;
		}
	}

	state _gute {
		entry: output "_gute";
		transitions {
			when n enter _guten;
		}
	}

	state _guten {
		entry: output "_guten";
		transitions {
			when b enter _gutenb;
		}
	}

	state _gutenb {
		entry: output "_gutenb";
		transitions {
			when e enter _gutenbe;
		}
	}

	state _gutenbe {
		entry: output "_gutenbe";
		transitions {
			when r enter _gutenber;
		}
	}

	state _gutenber {
		entry: output "_gutenber";
		transitions {
			when g enter _gutenberg;
		}
	}

	state _gutenberg {
		entry: output "_gutenberg";
		transitions {
			when _ enter _;
		}
	}

	state _e {
		entry: output "_e";
		transitions {
			when b enter _eb;
		}
	}

	state _eb {
		entry: output "_eb";
		transitions {
			when o enter _ebo;
		}
	}

	state _ebo {
		entry: output "_ebo";
		transitions {
			when o enter _eboo;
		}
	}

	state _eboo {
		entry: output "_eboo";
		transitions {
			when k enter _ebook;
		}
	}

	state _ebook {
		entry: output "_ebook";
		transitions {
			when _ enter _;
		}
	}

	state _b {
		entry: output "_b";
		transitions {
			when y enter _by;
		}
	}

	state _by {
		entry: output "_by";
		transitions {
			when _ enter _;
		}
	}

	state _c {
		entry: output "_c";
		transitions {
			when o enter _co;
		}
	}

	state _co {
		entry: output "_co";
		transitions {
			when s enter _cos;
		}
	}

	state _cos {
		entry: output "_cos";
		transitions {
			when t enter _cost;
		}
	}

	state _cost {
		entry: output "_cost";
		transitions {
			when _ enter _;
		}
	}

	state _a {
		entry: output "_a";
		transitions {
			when t enter _at;
			when r enter _ar;
			when n enter _an;
			when l enter _al;
		}
	}

	state _at {
		entry: output "_at";
		transitions {
			when _ enter _;
		}
	}

	state _ar {
		entry: output "_ar";
		transitions {
			when t enter _art;
		}
	}

	state _art {
		entry: output "_art";
		transitions {
			when h enter _arth;
		}
	}

	state _arth {
		entry: output "_arth";
		transitions {
			when u enter _arthu;
		}
	}

	state _arthu {
		entry: output "_arthu";
		transitions {
			when r enter _arthur;
		}
	}

	state _arthur {
		entry: output "_arthur";
		transitions {
			when _ enter _;
		}
	}

	state _an {
		entry: output "_an";
		transitions {
			when d enter _and;
			when y enter _any;
		}
	}

	state _and {
		entry: output "_and";
		transitions {
			when _ enter _;
		}
	}

	state _any {
		entry: output "_any";
		transitions {
			when w enter _anyw;
			when o enter _anyo;
		}
	}

	state _anyw {
		entry: output "_anyw";
		transitions {
			when h enter _anywh;
		}
	}

	state _anywh {
		entry: output "_anywh";
		transitions {
			when e enter _anywhe;
		}
	}

	state _anywhe {
		entry: output "_anywhe";
		transitions {
			when r enter _anywher;
		}
	}

	state _anywher {
		entry: output "_anywher";
		transitions {
			when e enter _anywhere;
		}
	}

	state _anywhere {
		entry: output "_anywhere";
		transitions {
			when _ enter _;
		}
	}

	state _anyo {
		entry: output "_anyo";
		transitions {
			when n enter _anyon;
		}
	}

	state _anyon {
		entry: output "_anyon";
		transitions {
			when e enter _anyone;
		}
	}

	state _anyone {
		entry: output "_anyone";
		transitions {
			when _ enter _;
		}
	}

	state _al {
		entry: output "_al";
		transitions {
			when m enter _alm;
		}
	}

	state _alm {
		entry: output "_alm";
		transitions {
			when o enter _almo;
		}
	}

	state _almo {
		entry: output "_almo";
		transitions {
			when s enter _almos;
		}
	}

	state _almos {
		entry: output "_almos";
		transitions {
			when t enter _almost;
		}
	}

	state _almost {
		entry: output "_almost";
		transitions {
			when _ enter _;
		}
	}

	state _n {
		entry: output "_n";
		transitions {
			when o enter _no;
		}
	}

	state _no {
		entry: output "_no";
		transitions {
			when _ enter _;
		}
	}

	state _o {
		entry: output "_o";
		transitions {
			when f enter _of;
			when u enter _ou;
		}
	}

	state _of {
		entry: output "_of";
		transitions {
			when _ enter _;
		}
	}

	state _ou {
		entry: output "_ou";
		transitions {
			when t enter _out;
		}
	}

	state _out {
		entry: output "_out";
		transitions {
			when l enter _outl;
		}
	}

	state _outl {
		entry: output "_outl";
		transitions {
			when i enter _outli;
		}
	}

	state _outli {
		entry: output "_outli";
		transitions {
			when n enter _outlin;
		}
	}

	state _outlin {
		entry: output "_outlin";
		transitions {
			when e enter _outline;
		}
	}

	state _outline {
		entry: output "_outline";
		transitions {
			when _ enter _;
		}
	}

	state _j {
		entry: output "_j";
		transitions {
			when _ enter _;
		}
	}

	state _i {
		entry: output "_i";
		transitions {
			when s enter _is;
		}
	}

	state _is {
		entry: output "_is";
		transitions {
			when _ enter _;
		}
	}

	state _w {
		entry: output "_w";
		transitions {
			when h enter _wh;
			when i enter _wi;
		}
	}

	state _wh {
		entry: output "_wh";
		transitions {
			when a enter _wha;
		}
	}

	state _wha {
		entry: output "_wha";
		transitions {
			when t enter _what;
		}
	}

	state _what {
		entry: output "_what";
		transitions {
			when s enter _whats;
		}
	}

	state _whats {
		entry: output "_whats";
		transitions {
			when o enter _whatso;
		}
	}

	state _whatso {
		entry: output "_whatso";
		transitions {
			when e enter _whatsoe;
		}
	}

	state _whatsoe {
		entry: output "_whatsoe";
		transitions {
			when v enter _whatsoev;
		}
	}

	state _whatsoev {
		entry: output "_whatsoev";
		transitions {
			when e enter _whatsoeve;
		}
	}

	state _whatsoeve {
		entry: output "_whatsoeve";
		transitions {
			when r enter _whatsoever;
		}
	}

	state _whatsoever {
		entry: output "_whatsoever";
		transitions {
			when _ enter _;
		}
	}

	state _wi {
		entry: output "_wi";
		transitions {
			when t enter _wit;
		}
	}

	state _wit {
		entry: output "_wit";
		transitions {
			when h enter _with;
		}
	}

	state _with {
		entry: output "_with";
		transitions {
			when _ enter _;
		}
	}

	state _v {
		entry: output "_v";
		transitions {
			when o enter _vo;
		}
	}

	state _vo {
		entry: output "_vo";
		transitions {
			when l enter _vol;
		}
	}

	state _vol {
		entry: output "_vol";
		transitions {
			when _ enter _;
		}
	}

	state _u {
		entry: output "_u";
		transitions {
			when s enter _us;
		}
	}

	state _us {
		entry: output "_us";
		transitions {
			when e enter _use;
		}
	}

	state _use {
		entry: output "_use";
		transitions {
			when _ enter _;
		}
	}

	state _t {
		entry: output "_t";
		transitions {
			when h enter _th;
		}
	}

	state _th {
		entry: output "_th";
		transitions {
			when e enter _the;
			when o enter _tho;
			when i enter _thi;
		}
	}

	state _the {
		entry: output "_the";
		transitions {
			when _ enter _;
		}
	}

	state _tho {
		entry: output "_tho";
		transitions {
			when m enter _thom;
		}
	}

	state _thom {
		entry: output "_thom";
		transitions {
			when s enter _thoms;
		}
	}

	state _thoms {
		entry: output "_thoms";
		transitions {
			when o enter _thomso;
		}
	}

	state _thomso {
		entry: output "_thomso";
		transitions {
			when n enter _thomson;
		}
	}

	state _thomson {
		entry: output "_thomson";
		transitions {
			when _ enter _;
		}
	}

	state _thi {
		entry: output "_thi";
		transitions {
			when s enter _this;
		}
	}

	state _this {
		entry: output "_this";
		transitions {
			when _ enter _;
		}
	}

	state _s {
		entry: output "_s";
		transitions {
			when c enter _sc;
		}
	}

	state _sc {
		entry: output "_sc";
		transitions {
			when i enter _sci;
		}
	}

	state _sci {
		entry: output "_sci";
		transitions {
			when e enter _scie;
		}
	}

	state _scie {
		entry: output "_scie";
		transitions {
			when n enter _scien;
		}
	}

	state _scien {
		entry: output "_scien";
		transitions {
			when c enter _scienc;
		}
	}

	state _scienc {
		entry: output "_scienc";
		transitions {
			when e enter _science;
		}
	}

	state _science {
		entry: output "_science";
		transitions {
			when _ enter _;
		}
	}

	state _r {
		entry: output "_r";
		transitions {
			when e enter _re;
		}
	}

	state _re {
		entry: output "_re";
		transitions {
			when s enter _res;
		}
	}

	state _res {
		entry: output "_res";
		transitions {
			when t enter _rest;
		}
	}

	state _rest {
		entry: output "_rest";
		transitions {
			when r enter _restr;
		}
	}

	state _restr {
		entry: output "_restr";
		transitions {
			when i enter _restri;
		}
	}

	state _restri {
		entry: output "_restri";
		transitions {
			when c enter _restric;
		}
	}

	state _restric {
		entry: output "_restric";
		transitions {
			when t enter _restrict;
		}
	}

	state _restrict {
		entry: output "_restrict";
		transitions {
			when i enter _restricti;
		}
	}

	state _restricti {
		entry: output "_restricti";
		transitions {
			when o enter _restrictio;
		}
	}

	state _restrictio {
		entry: output "_restrictio";
		transitions {
			when n enter _restriction;
		}
	}

	state _restriction {
		entry: output "_restriction";
		transitions {
			when s enter _restrictions;
		}
	}

	state _restrictions {
		entry: output "_restrictions";
		transitions {
			when _ enter _;
		}
	}

	state _p {
		entry: output "_p";
		transitions {
			when r enter _pr;
		}
	}

	state _pr {
		entry: output "_pr";
		transitions {
			when o enter _pro;
		}
	}

	state _pro {
		entry: output "_pro";
		transitions {
			when j enter _proj;
		}
	}

	state _proj {
		entry: output "_proj";
		transitions {
			when e enter _proje;
		}
	}

	state _proje {
		entry: output "_proje";
		transitions {
			when c enter _projec;
		}
	}

	state _projec {
		entry: output "_projec";
		transitions {
			when t enter _project;
		}
	}

	state _project {
		entry: output "_project";
		transitions {
			when _ enter _;
		}
	}

}